pragma solidity ^0.4.8;


// THE MORTGAGE CONTRACT IS IN FINNEY (1 / 1000 Ether)
contract MortgageContract {
    
    
    //PROBLEM: What happens if someone does not pay? I think in real life that is why
    //         there is a down payment, so it will be the same here
    //Methodology: I need to update lastPayment at the correct time. For example,
    //         if payments are due at the first of each month, I need to update lastPayment 
    //         when the on the first of each month. This should not be effected if the borrower
    //         makes extra payments. PROBLEM: what if the borrower makes a payment during the month
    //         so it counts all towards the principal, but does not make a payment at the end of the 
    //         month when the payment is due. Maybe I should have a collectPayment that the lendor calls
    //         at the start of each month. All of the payments made by the borrower for the month will then 
    //         be correctly allocated. I will first find if he has payed enough to cover the one required
    //         payment - if he has then the rest of the payment will go towards principal. But this gets rid of
    //         the benefit of paying early in a month so that you reduce the interest for your next payment.
    //         I can account for this by figuring out if he has enough to cover the required payment
    //         if there was no reduction in interest. Then calculate the new (and smaller)  
    //         required payment. Then deduct everything except the new interest payment from the principal
    //PROBLEM: Under this method, if you only make the minimum payment, which is the interest due,
    //         you will only pay off the interest and never reduce the principal so you will never 
    //         pay off the mortgage
    
    
    address lender;
    address borrower;
    uint remainingPrincipal;
    uint interestRate;
    uint timeBetweenPayments;
    uint mortgageLength;
    uint lastPayment;
    uint totalInterestExpense;
    
    uint uncollectedPayments;
    uint paymentsMade;
    uint paymentsDue;
    
    mapping(address => uint) withdrawable;
    
    modifier isInterestParty (address _sender) {
        require (lender == _sender || borrower == _sender);
        _;
    }
    
    modifier isBorrower (address _sender) {
        require (_sender == borrower);
        _;
    }
    
    modifier isLender (address _sender) {
        require (_sender == lender);
        _;
    }
    
    modifier isPaymentDue () {
        require (now > lastPayment + timeBetweenPayments);
        _;
    }

    event collectMoney (uint, uint);
        
    function MortgageContract (address _lender, address _borrower,
        uint _principal, uint _interestRate, uint _timeBetweenPayments, 
        uint _downPayment) payable {
            
        lender = _lender;
        borrower = _borrower;
        remainingPrincipal = _principal * 1000;
        interestRate = _interestRate;
        timeBetweenPayments = _timeBetweenPayments;
        withdrawable[_lender] = _downPayment;
        withdrawable[_borrower] = _principal;
    }
    
    function makePayment () isBorrower(msg.sender) payable {
        uncollectedPayments += msg.value * 1000;
        paymentsMade += 1;
    }
    
    function collectPayments () isLender(msg.sender) isPaymentDue() {
        uint minimumPayment = remainingPrincipal * interestRate / 100000;
        // uncollectedPayments = all of the money the borrower paid since last collection
        if (uncollectedPayments > minimumPayment) {
            uint acceleratedPayment = uncollectedPayments - minimumPayment;
            /*
            minimum payment is only the interest expense.
            IRL the minimum payment is just a monthly payment that is standard
            over the entire course of the mortgage. Therefore, this contract 
            mimics the real life practice because the minimum payment is calculated
            before the accelerated payment is taken out of the remaining principal.
            Therefore, when the minimum payment is proccessed, the principal will have decreased,
            lowering the interest expense. This means that the minimum payment will now 
            cover the new interest expense as well as some of the remaining principal.
            */
            
            remainingPrincipal -= acceleratedPayment;
            uint interestExpense = remainingPrincipal * interestRate / 100000;
            remainingPrincipal -= msg.value - interestExpense;
            
            totalInterestExpense += interestExpense;
            
            /* if you pay off more than interestExpense and remainingPrincipal
               return the excess payment to the borrower
            */
            if (remainingPrincipal < 0) {
                withdrawable[borrower] -= remainingPrincipal;
                withdrawable[lender] += (msg.value + remainingPrincipal);
            } else {
                withdrawable[lender] += msg.value;
            }
   
        } else {
            totalInterestExpense += msg.value;
            withdrawable[lender] += msg.value;
        }
        uncollectedPayments = 0;
        collectMoney(withdrawable[lender], withdrawable[borrower]);
    }
    
    function inquiry () isInterestParty (msg.sender) returns (uint, uint, uint) {
        return (remainingPrincipal, totalInterestExpense, paymentsMade);
    }
    
    function withdrawFunds () isInterestParty (msg.sender){
        // divide by 1000 to convert from Finney to Ether
        uint amount = withdrawable[msg.sender] / 1000;
        require (amount > 0);
        withdrawable[msg.sender] = 0;
        msg.sender.transfer(amount);
    }
}

// The MortgageCreator Contract is in Ether
contract MortgageCreator {
    
    mapping (uint => contractTerms) allTerms;
    uint numberOfProposals;
    
    
    struct contractTerms {
        uint proposedDate;
        address borrower;
        address lender;
        uint principal;
        uint interestRate;
        uint yearlyCompounds;
        uint downPayment;
        bool borrowerApproved;
        bool signed;
    }
    
    modifier isLender (address _sender, uint _TermsID) {
        require (allTerms[_TermsID].lender == _sender);
        _;
    }
    
    modifier isBorrower (address _sender, uint _TermsID) {
        require (allTerms[_TermsID].borrower == _sender);
        _;
    }
    
    modifier isInterestParty (address _sender, uint _TermsID) {
        require (allTerms[_TermsID].borrower == _sender || 
            allTerms[_TermsID].lender == _sender);
        _;
    }

    function declareMatch (address _borrower, address _lender) returns (uint) {
        numberOfProposals ++;
        allTerms[numberOfProposals].borrower = _borrower;
        allTerms[numberOfProposals].lender = _lender;
        return numberOfProposals;
    }
    
    function proposeContractTerms (uint _interestRate, uint _yearlyCompounds,
            uint _downPayment, uint _principal, uint _TermsID, uint _mortgageLength) 
            isLender (msg.sender, _TermsID) payable {
        require (msg.value == _principal);
        allTerms[_TermsID].interestRate = _interestRate;
        allTerms[_TermsID].yearlyCompounds = _yearlyCompounds;
        allTerms[_TermsID].downPayment = _downPayment;
        allTerms[_TermsID].principal = _principal;
        allTerms[_TermsID].proposedDate = now;
        
    }
    
    function acceptTerms (uint _TermsID) isBorrower (msg.sender, _TermsID) payable {
        require (msg.value == allTerms[_TermsID].downPayment);
        allTerms[_TermsID].borrowerApproved = true;
    }
    
    function declineTerms (uint _TermsID) isBorrower (msg.sender, _TermsID) {
        delete allTerms[_TermsID];
    }
    
    /* if the borrower did not accept/decline the terms after 90 days, then 
       the lendor can retract the offer
    */   
    function retractOffer (uint _TermsID) isLender (msg.sender, _TermsID) {
        require (now > (allTerms[_TermsID].proposedDate + 90 * 1 days));
        require (!allTerms[_TermsID].signed);
        delete allTerms[_TermsID];
    }
    
    
    /* what happens when the offer is retracted and then the borrower tries to
       sign the contract? Is it more efficient to not delete the contract and 
       make the contract unsignable? 
    */
    function signContract (uint _TermsID) isInterestParty (msg.sender, _TermsID) {
        require (allTerms[_TermsID].borrowerApproved = true);
        //interest rate multiplied by 100,000 for rounding purposes 
        uint effectiveInterestRate = ((1 + allTerms[_TermsID].interestRate) 
            ^ (1 / allTerms[_TermsID].yearlyCompounds) - 1) * 100000;
        uint timeBetweenPayments = 365 / allTerms[_TermsID].yearlyCompounds;
        MortgageContract newMortgage = new MortgageContract 
            (allTerms[_TermsID].lender, allTerms[_TermsID].borrower,
            allTerms[_TermsID].principal, effectiveInterestRate, 
            timeBetweenPayments, allTerms[_TermsID].downPayment);
        allTerms[_TermsID].signed = true;
        newMortgage.transfer(allTerms[_TermsID].downPayment + allTerms[_TermsID].principal);
    }
 }
